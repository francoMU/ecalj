Installation NOTE (Easy to read by org mode in emacs).

Follow these steps. 
 (0) Get ecalj package and get tools required.  
 (1) Make single-core LDA part. Make k-paralell LDA part. Make for GW part. Set crystal structure tools.
 (2) Install test.

However, you can do steps (1)-(2) just by a command, 
$InstallAll.foobar 
at ecalj/.
When installation procedure have finished, we have all required binaries and
shell scripts in your ~/bin/ directory, or somewhere else where BINDIR 
specified in InstallAll.foobar. 
Watch InstallAll.foobar show no serious errors. 
As long as all binaries generated, things fine.
But, when you do version up, be careful ---if error occurs, you may still use old versions.

In the following explanation, we assume gfortran in ubuntu.
But we can also use ifort and others in your environment with
minimum changes in makefiles. 
Let me have your InstallAll.foobar; it is very helpful for us.
For small systems such as Si and GaAs, 
we can use even Ubuntu + gfortran + note PC to observe how QSGW works.

* (0) Get ecalj package and get tools.
--- Let us assume you use ubuntu. ---
You need following tools and libraries to be installed.  
>sudo apt-get install git  #version control and to get source from github  
>sudo apt-get install gitk #git gui.   
>sudo apt-get install gfortran      # GFORTRAN  
>sudo apt-get install openmpi-bin libopenmpi-dev #  or openmpi-dev ?
>sudo apt-get install libfftw3-3     or something else # FFTW  
>sudo apt-get install libblas3gf     or something else # BLAS  
>sudo apt-get install liblapack3gf   or something else  # LAPACK  
>sudo apt-get install csh bash tcsh gawk  # shells  

memo: I think etags is automatically installed when you install 
      emacs in the latest ubuntu. etags is essentially needed only for developers.

Note that python 2.x is also assumed 
(usually already in ubuntu. Type \>python (ctrl+D for quit)).
Version ctrl is by git (which makes things easier, but not
necessarily required for installation).

After you have installed git (version control software), you can get ecalj package by  
>git clone https://github.com/tkotani/ecalj.git # Get source code  

for ecalj. or get it in the form *.zip 
from the page https://github.com/tkotani/ecalj
(push zip button). I recommend you to use git, 
to check your changes ($git diff), know version id, and upgrade.
After you did the above git clone command, a directory ecalj/ appears
(under the directory at which you did git clone).

We can check history of ecalj by "$gitk --all" at ecalj/ directory after you got git clone.

* (1) and (2) are performed by InstallAll.foobar.
Run InstallAll.ifort (in the case of intel fortran) at ecalj/. 
We can invoke this command as;

>cd ecalj  
>./InstallAll.ifort  
(To clean all, do ./CleanAll.ifort).  

Please look into the script "InstallAll.ifort". It is a small text file.
It contains the setting of your BINDIR= directory,
to which the InstallAll.ifort will copy all binaries and scripts.
It internally uses three machine-comilar dependent files;  
  a.lm7K/MAKEINC/Make.inc.ifort (for single core version )  
  b.lm7K/MAKEINC/Make.inc.ifort_mpik (k-point paralell version )  
  c.fpgw/exec/make.inc.ifort  (this is only for mpi-omp version ).  
At the last stage of the script, it runs automatic tests.
(You can neglect failure for nio_gwsc; it may show one-failure among two checks).
The test may use ten minutes or more... Have a coffee!
  
InstallAll.ifort may not work for your environment. Then you need to prepare your own InstallAll.foobar, in which you have to set compilar, linker, compilar options.

When InstallAll.ifort works well, it will show OK! signs finally. (some tests such as nio_gwsc may fail in cases, but usually no problem. Ask to takaokotani@gmail.com if too much errors you observed.).


* explanation of of (1). Make single core LDA part (it is in ecalj/lm7K/).
Let us assume gfortran case.
Move to ecalj/lm7K/, then do "make PLATFORM=gfortran LIBMATH=xxx". 
Then make process start. (LIBMATH= specify BLAS,Lapack, and fftw.)
The main makefile is ecalj/lm7K/Makefile, which contains lines
>  PLATFORM=gfortran   #default is PLATFORM=gfortran  
>  ...  
>  include MAKEINC/Make.inc.$(PLATFORM)  

This means that this Makefile uses ecalj/lm7K/MAKEINC/Make.inc.gfortran
as a part of the Makefile. Thus we have to check settings in it 
in advance to run "make PLATFORM=...".
LIBMATH= should contain path to the math libraries, FFTW, BLAS and LAPACK.
An example is   
  LIBMATH="/usr/lib/libfftw3.so.3 /usr/lib/liblapack.so.3gf
  /usr/lib/libblas.so.3gf"  
Compilar options FFLAGS=, FFLAGS_LESS=... can be choosed by your own
manner. But usually Make.inc.gfortran works without changes
(let me know your changes; I like to include it in ecalj).

Let us consider ifort case. In this case, we run  
>make PLATFORM=ifort LIBMATH='-mkl'   

There are several MAKEINC/Make.inc.ifort*
(not _mpik*) with which we installed to machines. 
You can choose one of them or you can set your own Make.inc.ifort.*
(compilar, compilar options, math library).

Warning messages like ": warning: ignoring old commands for target `/vxcnls.o'" is
just because of problem of Makefile. you can neglect this. We will fix it..

Parallel make like  
>make -j24 PLATFORM=gfortran  

can speed it up for multicore machines(24 core in this case). 
But it stops because of dependency is not well-described in our current Makefile. 
In such case, repeat it a few times, or repeat it without -j24.

Finally run  
>make PLATFORM=gfortran install  

This just copy required files (binaries and scripts) to your ~/bin.
(check it in Makefile). If you like to copy them to ~/xxx instead of~/bin,
make with BINDIR=xxx.

(For CMD workshop participants: run  
>make PLATFORM=ifort.cmd LIBMATH='-mkl' BINDIR=~/bin


* WARN! Some install problems 
** I saw that current ecalj with gfortran4.6 or 4.7 works fine with
  FFLAGS=-O2, but failed with FFLAGS=-O3. (I am not sure now).
** ifort12 may need FFLAGS=-O1 in MAKEINC/Make.inc.ifort. 
  -->Try InstallAll.ifort12.
** We may need -heap-arrays 100 (when zero, we had a problem in a version
  of ifort). In cases, -heap-arrays option did not generate working binaries.
  However, I think "ulimit -s unlimited" before QSGW calculations and
  so on works OK. So, maybe we don't need -heap-arrays option.
** mpiifort works for liker, but mpif90 did not... (but opposite case
  maybe). Need to set this in lm7K/MAKEINC/Make.inc.ifort
  lm7K/MAKEINC/Make.inc.ifort_mpik and fpgw/exec/make.inc.ifort
  (FC and LK variables).


##### (2)-i make MPI LDA part.
lmf-MPIK and lmfgw-MPIK are needed for gwsc (srcipt for QSGW). 
These are k-point parallel version of lmf, and gw driver lmfgw. To
make it, do  
"make PLATFORM=gfortran_mpik".  
For ifort, set PLATFORM=ifort_mpik.  
Then Makefile includes ecalj/lm7K/MAKEINC/Make.inc.ifort_mpik.
You may need to add -heap-arrays 1 (for large calculations. Because we
use large stacksize) to ecalj/lm7K/MAKEINC/Make.inc.ifort_mpi, but I
am not so sure about this.

(For CMD workshop participants: run  
 >make PLATFORM=ifort_mpik.cmd LIBMATH='-mkl'

which corresponds to MAKEINC/Make.inc.ifort_mpik.cmd)

*Clean up:  
If something wrong. do "make clean" or "make cleanall" and start over.
Look into Makefile if you like to know what they do.
"make cleanall" removes all *.o *.a modules, and binaries.

** Move binaries to your bin by 
>make install
at ecalj/lm7K. It just moves all requied binaries to your ~/bin.
In advance, you have to make your bin, and add ~/bin to  your path
(e.g. "export PATH=$HOME/bin:$PATH" in .bashrc . Then login again or "source .bashrc")


* exlanation of (1), Installation for fpgw/
This is GW part.
At ecalj/fpgw/exec/ directory, you have to a softlink make.inc such as
>lrwxrwxrwx 1 takao takao 17 Aug 25 13:18 make.inc -> make.inc.gfortran

For each machine you have to prepare your own make.inc.foobar 
(There are samples. Here is the case of make.inc.ifort.cmd), 
and do  
>ln -s make.inc.ifort.cmd make.inc  

to make a soft like make.inc -> make.inc.cmd


* Q. What is soft link foo -> bar?  A. "foo" is an alias of the file "bar"  ***

Then you have to run  
>make  
>make install  
>make install2  

Before this, you have to set blas and lapack in fpge/exec/make.inc.
(for ifort, -mkl is enough. LIBMATH= should be the same as that in Make.inc.*.
"make install" copy requied files to your ~/bin.


* Caution!: we often see "Segmentation fault"due to stacksize limit 
(See the size by a command "ulimit -a"). 
It is needed to run "ulimit -s unimited" in the job-submition script 
or before running GW jobs. 


* Explanation of step (2), Install test
We have to check whether binaries works fine or not.
Move to ecalj/TestInstall. Then type make (with no arguments). 
It shows help about how to do test.
To test all of binaries, just do
>make all  

All tests may require ~10min or a little more.  (nio_gwsc takes ~300sec)
In cases, nio_gwsc fails, showing  
 >FAILED: nio_gwsc QPU compared by ./bin/dqpu  
 >PASSED: nio_gwsc diffnum  

However, we do not need to care its failure sign. (so nio_gwsc test
must be improved...). (numerically small differences).

Help of make (no arguments) at ecalj/TestInstall, shows
>make lmall   !tests only LDA part.  
>make gwall   !tests only GW part.  


* NOTE (nov19 2014 kino):   In TestInstall/Makefile.define,
we define  
LMF=lmf  
LMFP=lmf-MPIK  
(it is possible to use "LMFP=lmf-MPI" instead(for future development).
If we set LMFP=$(LMF), tests are done with using lmf, not with using lmf-MPIK.

* NOTE: in principle, repeat make should do nothing when all binaries
are correctly generated. However, because of some problem in makefile, 
you may see some make procedure is repeated. You can neglect it as
long as "All test are passed!" is shown in the (4)install test.
