# -*- Mode: org ; Coding: utf-8-unix -*-
j#+TITLE: ecalj : Category and token in ctrl file
#+AUTHOR: takao kotani @ tottori university, Japan
#+email: takaokotani@gmail.com

Currently, ctrl file have nested structure.

* SPEC
** ATOM
    a few-character string that labels the atom of that
    species.  This string names the disk file that will
    hold information about that atom (potential
    parameters, moments, potential and some sundry other
    information), and is used elsewhere in the input (see
    categories SITE and START below) to identify a
    particular atom.  Note: species are split into
    classes, and so the program differentiates names by
    appending integers to the label for species with
    multiple classes.
Under each ATOM=XXX, we set following subtokens.
*** Z=       
nuclear charge. We can use fractional number
*** R=
the sphere radius, in atomic units (Bohr)
*** NR=,A=
defines the radial mesh, together with R, on which
           densities and potentials are tabulated with MT sphere
           It is a shifted logarithmic radial mesh of points
           const*exp(A*(0..NR-1)-1).
*** LMX= 
basis l-cutoff inside the sphere.  If not specified,
           it defaults to NL-1.
*** IDMOD=   (special option)
a set of integers, one for each l-channel controlling
           how the potential parameter enu changes from
           one iteration to the next in a self-consistency cycle.
           0:  lets the enu shift to the center of gravity
              of the occupied part of the band (this is the default);
           1:  freezes the logarithmic derivative of the
              wave function phi at the sphere radius from one iteration
              to the next;
           2:  freezes the enu's from one iteration to the next.
*** IDU=, UH=, JH=
pecify parameters for LDA+U.  IDU=#,#,#,... specifies which
          l-channels are to have U and the type of LDA+U implementation.
          0 in a particular l-channel means no U is to be applied
          1,2,3 are for particular forms of LDA+U.  However,
          at present the ASA code does not have a proper implementation of LDA+U;
          instead potential parameters C and enu may be shifted by a constant.
          Use IDU=4 to shift both spin channels by a constant (specified by U)
          or  IDU=5 to shift majority channel by U and minority by J.
          Example:
             IDU= 0 0 0 5 UH= 0 0 0 -0.28    JH=0 0 0 0.23
          shifts the majority f channel by -0.28 Ry and the minority f channel
          by 0.23 Ry.  This mimics an LDA+U calculation for Gd.

*** P=real,real,....
Starting values for potential functions, one for each of l=0..LMXA (real numbers for s,p,d,f
Default: taken from an internal table.---> See by 'lmfa si|grep conf' for ctrl.si.
*** PZ= real,real,...
Starting values for local orbital's potential functions, one for each of l=0..LMX. Setting PZ=0 for any l means that no local orbital is specified for this l. Each integer part of PZ must be either one less than P (semicore state) or one greater (high-lying state).
Default: zero.

*** Q= real,real,...
charges for each l-channel making up free-atom density
Default: taken from an internal table.
*** MMOM=real,real,...
magnetic moments for each l-channel making up free-atom density Relevant only for the spin-polarized case.
Default: 0,0,... 
*** LFOCA
prescribes how core is treated.
    0 confines core to within RMT. Usually the least accurate. 
    1 treats the core as frozen but lets it spill into the interstitial 
    2 same as 1, but interstitial contribution to vxc treated perturbatively. 
Default: 1 
*** LMXA
angular momentum l-cutoff for projection of wave functions tails centered at other sites in this sphere. Must be at least the basis l-cutoff (specified by LMX=).
Default:NL-1.
LMXA should be the same for all sites for QSGW (2019,because of implementation problem).

*** C-HOLE
channel for core hole. You can force partial core occupation. Syntax consists of two characters, the principal quantum number and the second one of `s',`d',`d',`f' for the l quantum number, e.g. `2s' See Partially occupied core holes for description and examples.
Default: nothing 
*** C-HQ= real[,real]
First number specifies the number of electrons to remove from the l channel specified by C-HOLE=.
Second (optional) number specifies the hole magnetic moment.
See Partially occupied core holes for description and examples. 

*** KMXA
polynomial cutoff for projection of wave functions in sphere. Smoothed Hankels are expanded in polynomials around other sites instead of Bessel functions as in the case of normal Hankels.
Default:3
*** RSMA
smoothing radius for projection of smoothed Hankel tails into augmentation spheres. sm-Hankels are expanded in polynomials by integrating with Gaussians at that site. Thus RSMA=0 => sm-Hankels Taylor series expansion about the origin. For large KMXA the choice is irrelevant, but RSMA is best chosen that maximizes the convergence of sm-Hankels with KMXA.
Default: R*0.5, with R=augmentation (muffin-tin) radius. 
*** RSMG
smoothing radius for Gaussians added to sphere densities to correct multipole moments needed for electrostatics. Value should be as large as possible 
but small enough that the Gaussian doesn't spill out significantly beyond rmt.
Default: R/4, with R=augmentation (muffin-tin) radius. 
*** LMXL (obsolate?)
angular momentum l-cutoff for explicit representation of local charge on a radial mesh.
Default:NL-1 
*** RFOCA
smoothing radius fitting tails of core density. A large radius produces smoother interstitial charge, but less accurate fit.
Default: R*0.4, with R=augmentation (muffin-tin) radius. 
*** RSMFA
smoothing radius for tails of free-atom charge density. Irrelevant except first iteration only (non-self-consistent harris). A large radius produces smoother interstitial charge, but somewhat less accurate fit.
Default: R/2, with R=augmentation (muffin-tin) radius. 

* SYMGRP
Category SYMGRP provides symmetry information; it helps in two
ways.  First it is the relevant information to find which sites
are equivalent, which makes for simpler and more accurate band
calculations, and second, it reduces the number of k-points
needed in Brillouin zone integrations.

Unless you are doing something special, normally you don't need
SYMGRP; the program is capable of finding its own symmetry
operations.  However, if you want to restrict operations to a set
you specify, or if you are doing something (like noncollinear
magnetism) where the symmetry group isn't specified by atomic
positions along, use SYMGRP to explicitly declare a set of
generators from which the entire group can be created.  For
example, the three operations R4X, MX and R3D are sufficient to
generate all 48 elements of cubic symmetry (the inversion is
always assumed).

A symbol describing a generator for a point group operation has
the form O(nx,ny,nz) where O is one of M, I or Rj for mirror,
inversion and j-fold rotation; and nx,ny,nz are a triplet of
indices specifying the axis of operation.  You may use X, Y, Z or
D as shorthand for (1,0,0), (0,1,0), (0,0,1), (1,1,1).  You may
also enter products, such as I*R4X.  Example:
  SYMGRP  R4X MX R3D
specifies three generators (4-fold rotation around x, mirror in
x, 3-fold rotation around (1,1,1)) and will result in 48 symmetry
operations.

To suppress all symmetry operations, use
  SYMGRP i*i

The keyword `find' tells the program to determine its own
symmetry operations.  Thus
  SYMGRP find
is amounts to the same as not including a SYMGRP category
in the input at all.

You can also specify a mix of generators you supply, and
tell the program to find any others that might exist.
For example,
  SYMGRP r4x find
specifies that 4-fold symop be included, and `find' tells
the program to look for any other symops that might exist.

Full-potential implementations require you to specify the full
space group operation.  This you do by appending a string of the
form `:(x1,x2,x3)' to the point group operation, or an alternate
form `::(p1,p2,p3)' with the double `::'.  The first defines the
translation in Cartesian coordinates; the second as multiples of
plat.  These two lines taken from testing/ctrl.cr3si6 are
equivalent specifications
  SYMGRP   r6z:(0,0,0.4778973) r2(1/2,sqrt(3)/2,0)
  SYMGRP   r6z::(0,0,1/3)      r2(1/2,sqrt(3)/2,0)

* BZ
 Category BZ holds information concerning the numerical
 integration of energy bands over the Brillouin Zone.  The LMTO
 programs are not tied to any one method, so the desired method
 must be specified by a token.  Unless a table of k-points is
 supplied and the GETQP switch is set, the program will divide
 the BZ into a uniform mesh of points by making NKABC divisions
 along the primitive reciprocal cell vectors.


** NKABC=  (1-3 integers) 
   the number of divisions in the three
          directions of the reciprocal lattice vectors.  The
          number of k-points in the full BZ is the product of
          these numbers, this may be reduced by symmetry
          operations.  Alternatively, you may specify k-points
          explicitly in a separate file, as the following shows:

**  TETRA= 
   selects BZ integration method
          0: Methfessel-Paxton sampling integration
             Tokens NPTS, N, W, EF0, DELEF described below are
             relevant to this integration scheme.
          1: tetrahedron integration

  W=      Line broadening for Gaussian sampling integration (Ry).
          Used only if TETRA=0 and MET>0.
          NB: if N=-1 below, the sampling weights are computed
          from the Fermi function instead of the error function.
          In that case, token W= corresponds to temperature, in Ry.

  N=      If N=#, #>0: integration uses generalized gaussian
          functions, i.e. polynomial of order N * gaussian to
          generate integration weights
          (see Methfessel & Paxton, Phys. Rev. B, 40, 3616 (1989))

          If N=#, #<0: integration uses the Fermi function to
          generate integration weights .

          By default, if a gap is found separating occupied and
          occupied states, the program will treat the system as
          and insulator, even when MET>0.  To suppress this,
          add 100(-100 for Fermi distribution) to N.

          Used only if TETRA=0 and MET>0.

**  SAVDOS=  
   0: does not save dos on disk

   1: writes the total density of states on NPTS mesh
            points to disk file `dos'.

   2: Write weights to disk for partial DOS
            (In the ASA, with METAL=t this occurs anyway)

   4: Same as option (2), but write weights m-resolved.
            You may also cause lm to generate m-resolved dos using
            the --pdos command-line argument.
            NB: you must turn OFF all symmetry operations to produce
            correct results.  (The extra inversion symmetry in the
            k-points from time-reversal symmetry is still allowed.)
          Note: SAVDOS>0 requires NPTS and DOS also.

**  NPT=   number of points in the density-of-states mesh used in
          conjunction with sampling integration.  Needed for
          sampling or if SAVDOS>0.

**  DOS=    (two numbers) Energy window over which DOS accumulated.
          Needed for sampling or if SAVDOS>0.

**  METAL= 4 
    (old document)
     specifies how the weights are generated for BZ
          integration.  There is a difficulty in that EITHER the
          weights must be known in advance before looping over
          k-points, in order accumulate the output density, OR
          the eigenvectors for each k-point must be kept until
          the Fermi level is determined.  When just accumulating
          the spherical part of the charge, as in the the ASA,
          the eigenvector information can be contracted over m,
          and is not prohibitive, but the situation is rather
          worse in general.  There are several ways out of this
          difficulty:

          METAL=0 system assumed to be an insulator; weights
                  known a priori

          METAL=2 integration weights are read from file `wkp',
                  which was generated in a prior band pass (if
                  file is missing, program will temporarily
                  switch to mode METAL=3:)

          METAL=3 two band passes are made; the first generates
                  only eigenvalues and the Fermi level is
                  determined.

          METAL=4 weights and related information is retained for
                  three distinct Fermi levels.  After the Fermi
                  level is determined, the density is obtained by
                  quadratic interpolation through the three
                  points.  (This scheme is suitable for sampling
                  only, since in that case just the Fermi level
                  is needed to set integration weights.  When
                  this scheme is used in conjunction with the
                  tetrahedron method, the charge density is
                  calculated with sampling.

**  NEVMX=  nevmx>0 : Find at most nevmx eigenvectors;
          nevmx=0 : program uses internal default
          nevmx<0 : no eigenvectors are generated (and
                    correspondingly, nothing associated with
                    eigenvectors such as density.)

          Caution: if you want to look and partial DOS well above
          the Fermi level (which comes out around 0), you must
          set EFMAX and NEVMX high enough to encompass the range
          of interest.

**  ZVAL=   Number of electrons to accumulate in BZ integration.
          Normally zval is computed by the program.

**  NOINV=  suppress the automatic addition of the inversion to the
          list of point group operations.  Usually addition of
          inversion is allowed because of time reversal symmetry.
          There are some cases, where this symmetry is broken,
          such as when spin-orbit coupling is included.  The
          program will automatically disable this addition in
          cases that knows the symmetry is broken.

**  FSMOM=  set the global magnetic moment (collinear magnetic case).
          In the fixed-spin moment method, a spin-dependent potential
          shift is added to constrain the total magnetic moment to
          value assigned by FSMOM=.  No constraint is imposed if this
          value is zero (the default).
          Notes:
          1. At present there is ba term missing in the HF
             energy, so it should not be used.
          2. an iterative scheme is used to determine the potential
             and it not foolproof.

**  INVIT=  enables inverse iteration generate eigenvectors (this is
          the default). It is more efficient than the QL method,
          but occasionally fails to find all the vectors.  When
          this happens, the program stops with the message:
             DIAGNO: tinvit cannot find all evecs
          If you encounter this message set INVIT=F.


* EWALD
 Category EWALD holds information controlling the Ewald sums for
 structure constants entering into, e.g. the Madelung summations.
 The defaults are usually adequate; for a detailed description
 the reader is referred to documentation on the Madelung sums.

**  NKDMX=  the maximum number of real-space lattice vectors
          entering into the Ewald sum, used for memory allocation.
          Normally you should not need this token.  Increase
          NKDMX if you encounter an error message like
             xlgen: too many vectors, n=...

**  AS=     controls the relative number of lattice vectors in real
          and reciprocal space.

** TOL=    error criterion for the Ewald sums.


* HAM
** GMAX
an energy cutoff used to create mesh for the interstitial density. 
A uniform mesh is created that best `fits into' cutoff gmax.

** FTMESH
he number of divisions specifying the uniform mesh 
density along the three reciprocal lattice vectors. The second and third arguments default to the value of the first one, if they are not specified. Required input; alternatively information may be specified by the preceding token..
** TOL
specifies the precision to which the wave functions are expanded in a Fourier expansion.
Default:10E-6

** FRZWF (=T or F)
specifies whether the augmented part of the wave functions be frozen. Normally they are updated as the potential changes, but with FRZWF=t the potential used to make augmentation wave functions is frozen at what is read from the restart file (or free-atom potential if starting from superposing free atoms).
Default:F

** FORCES (=0 or 1)
controls how forces are to be calculated, and how the second-order corrections are to be evaluated. Through the variational principle, the total energy is correct to second order in deviations from self-consistency, but forces are correct only to first order. To obtain forces to second order, it is necessary to know how the density would change with a (virtual) displacement of the core+nucleus, which requires a linear response treatment. lmf estimates this changes in one of two ways:
    the free-atom density is subtracted from the total density for nuclei centered at the original position and added back again at the (virtually) displaced position.
    For this ansatz, use FORCES=1.
    the core+nucleus is shifted and screened assuming a Lindhard dielectric response.
    For this ansatz, use FORCES=12. You also must specify ELIND, below. 

** ELIND (Default=-1)
a parameter in the the Lindhard response function, namely the Fermi level for a free-electron gas relative to the bottom of the band. You can specify this energy directly, by using a positive number for the parameter. If you use instead a negative number, the program will choose a default value from the total number of valence electrons and assuming a free-electron gas, scale that default by the absolute value of the number you specify. If you have a simple sp bonded system, the default value is an excellent choice. If you have d or f electrons, it tends to overestimate the response. Use a something smaller, e.g. ELIND=-0.7. ELIND is used in three contexts:
    (1) in the force correction term; see FORCES= above 
    (2) to estimate a self-consistent density from the input and output densities after a band pass 
    (3) to estimate a reasonable smooth density from a starting density after atoms are moved in a relaxation step. 

Default:-1

* ITER
** MIX 

Example: MIX=A2,b=.3,n=3

---follwings still may have some inconsistency ---

Category MIX controls the mixing scheme used in the iterations
 towards self-consistency.  There is a choice
 between the Broyden and Anderson mixing schemes. 
 Both schemes
 mix in linear combinations of the input and output density
 both from the present iteration and prior
 iterations to accelerate convergence to self-consistency (output
 = input).  For Anderson mixing, the mixing beta controls how
 much output and how much input moment is used in the next
 estimate such as: Q* = beta*Qout + (1-beta)*Qin.  Here
 Qout and Qin are charges, and
 the "charges" generated by the input "charge" for a sequence of
 prior iterations.  For small systems, you can take beta close to
 one; for large systems charge sloshing becomes a problem and you
 have to do something different.  Possible choices need to take
 beta much smaller.  See slatsm/amix.f for a description of the
 Anderson mixing scheme, and how it chooses the linear
 combination of prior iterations in the mix.

 The syntax for Anderson mixing is

   MIX=A[nmix][,b=beta][,n=nit]

 where the optional b=val assigns val to beta.

 Broyden mixing uses a more sophisticated procedure, in which it
 tries to build up the Hessian matrix.  It usually works better
 but has more pitfalls than Anderson.  As with Anderson, it uses
 linear mixing in the absence of prior iterations, Q* = beta*Qout
 + (1-beta)*Qin.  Broyden has an additional parameter, wc, that
 controls how much weight is given to prior iterations in the mix
 (see below).  The syntax for Broyden mixing is

   MODE=B[nmix][,b=beta][,n=nit]

 These parameters are as follows.  Fortran routine parmxp.f parses
 the MODE line to read the parameters, and pqmix.f does
 the mixing.

   nmix: maximum number of prior iterations to include in the mix
         (the mixing file may contain more than nmix prior
         iterations.)  NB: nmix=0 implies linear mixing.

   beta: the mixing beta (see above)

   nit:  the number of iterations to use mix with this set of
         parameters before passing on to the next set. After the
         last set is exhausted, it starts over with the first
         set.
** CONV
maximum allowed change in energy between iterations to reach self-consistency. 
Search diffe in concole output.

** CONVC
maximum allowed change in output-input density to reach self-consistency. 

** NIT 
maximum number of iteration 
* DYN 
is used for atomic position relaxiation.
(no automatic cell relaxiation yet). Only at LDA/GGA level.
** MSTAT
Sample: MSTAT[MODE=5 HESS=T XTOL=.001 GTOL=0 STEP=.015]
a collection of parameters specifying how site positions are relaxed given the internuclear forces

 MODE
   =0: skip relaxation of atom positions
    4: relax using conjugate-gradients
    5: relax using Fletcher-Powell
    6: relax using Broyden

 HESS
     T: read hessian from disk
    F: assume initial hessian=1

 XTOL convergence criterion in displacements
    r3=0 means not to use this criterion

 GTOL convergence criterion in forces
    r4=0 means not to use this criterion
    NOTE: you should have either r3>0 or r4>0

 STEP initial step length, in units of the lattice parameter a

Default: no relaxation 

** NIT
maximum number of relaxation steps 
