 This text documents the functioning of the preprocessor, to which all
 input files in these packages are initially subjected before the input is
 parsed.  The preprocessor can be quite a powerful tool: it builds some
 programming language capability into the input file itself, including
 variables declarations, branching control to skip over reading of certain
 lines, and reading a selected block of lines multiple times.

 Input lines are distinguished by the first character in the line:
   Lines beginning with `#' are comment lines and are ignored
   Lines beginning with `%' are interpreted as directives to the
         preprocessor, and are eliminated from the post-processed input.

 Source codes of particular relevance to the preprocessor are found in
 the slatsm directory:

   rdfiln.f  The source code for the preprocessor
   a2bin.f   evaluates algebraic expressions, converting the
             result into a binary number.
   bin2a.f   converts a binary number into a character string
             (inverse function to a2bin.f)
   symvar.f  maintains the variables table
   mkilst.f  generates a list of integers for looping constructs,
	     as described below.

 -------------- Conceptual overview of the preprocessor --------------

*Expression substitution
 rdfiln parses anything inside `{...}' and substitutes the contents for
 `something else'.  For example, the contents of `{...}' may by an
 algebraic expression.  In that case, rdfiln evaluates the expression
 numerically, and turns it back into a number, in ascii form. Thus the line
    talk {4/2} me
 becomes
    talk 2 me
 rdfiln evaluates '4/2' as a floating-point expression using a2bin.f,
 turns the result back into an ascii string, using bin2a.f, and
 substitutes the resultant substring for the original.
 Caution: if the substituted string is longer than recl, it is truncated.

*Variables
 rdfiln permits three kinds of variables, floating point scalar,
 floating-point vector, and character.  It uses a2bin to evaluate
 floating-point expressions and bin2a to recast the result as a string.
 The scalar symbols table is maintained in the standard variables table,
 File symvar.f contains the source code maintaining this table.; file
 symvec.f contains source code maintaining the vector variables table.
 (NB: symvec allocates space for these vectors through the malloc utility;
 your compiler must have pointer capability to use this table.)  The table
 of character variables is maintained in the character array ctbl, which is
 passed as an argument to rdfiln.

 NB: when EOF is reached, rdfiln eliminates any variables declared within
 the input file using `%' constructs described below (see % save directive
 below for exceptions to this rule).

*preprocessor directives
 Lines beginning with '% directive', where directive is one of:
   const cconst cvar udef var vec char char0 cchar getenv
   if ifdef ifndef iffile else elseif elseifd endif
   while repeat end
   echo show stop exit save trace vfind include includo
 are interpreted by rdfiln not as part of the input, but as a directive to
 do something, such as assign a value to a variable; to conditionally skip
 over a block of lines; to repeatedly read a block of lines using a 'loop'
 construct; and some miscellaneous commands.  Each of these is described
 in the 'preprocessor directives' section below.

 -------------- Expression substitution --------------
  A string in `{}', e.g. `{strn}' may contain one of the following.
  These are listed in order of precedence in which rdfiln tries to
  parse the contents of `{...}' .
  NB: The {} can be nested.

    1. the name of a character variable, say `myvar'
       In that case, rdfiln replaces string `{myvar}' with contents of
       `myvar'.

    2. a character variable name, say `myvar', followed by a qualifier (...)
       which can be one of the following:

      *(integer1,integer2) --- returns a substring of `myvar'
       {myvar(n1,n2)} is replaced by the (n1,n2) substring of `myvar'.

      *('char-list',n) --- marks a position in contents of `myvar'
       {myvar('char-list',n)} is replaced by integer, which is the
       index to the n'th occurence of one element in 'char-list'.
       n is optional.
       Example: If myvar="foo bar", {myvar('abc',2)} evaluates to 6.

      *(:e) --- returns an integer marking last nonblank character
       Example: If myvar='foo bar', {myvar(:e)} evaluates to 7.

      *(/'str1'/'str2'/,n1,n2) --- string substitution
       {myvar(/'str1'/'str2'/,n1,n2)} substitutes str2 for str1
       It does it for the n1'th to n2'th occurence.
       n1 and n2 are optional, as are the quotation marks.
       Example: If myvar="foo boor", {myvar(/'oo'/a/,2,2)} = "foo bar"

    3. The name of a vector variable, say `myvec'
       rdfiln replaces '{myvec}' with a sequence of numbers each separated
       by one space, which are the contents of myvec'  Thus
         % vec myvec[5] 5 4 3 2 1
         {myvec}
       becomes
         5 4 3 2 1
       (The first line declares `myvec' to be vector of length 5 and
       initializes its contents; see description of % vec below)
       Alternatively you can substitute a single element.  Thus
         {myvec(2)}
       is transformed into
         4

    4. a string consisting an algebraic expression of scalar numbers and
       previously declared variables.  (variables are declared and set with
       '%' directives; see `preprocessor directives' section below.)  rdfiln
       parses the expression, turns the result into a string, and
       substitutes the string in place of {expression}.  This is a special
       case of the following:

    5. A variable assignment, or a sequence of assignments separated by
       commas.  This syntax returns the value of the (last) expression,
       while assigning variables to evaluated expressions.
       NB: the last expression need not have an assignment operator
       {x=3}               ->  is replaced by '3'
       {x=3,y=4}           ->  is replaced by '4'
       {x=3,y=4,x*=y}      ->  is replaced by '4'
       {x=3,y=4,x*=y,x*2}  ->  is replaced by '24'

       The general syntax is:  {var assignment-op expr [, ... ]} .
       The following are the allowed operators:
       assignment-op         function
         '='            simple assignment
         '*='           replace 'var' by var*expr
         '/='           replace 'var' by var/expr
         '+='           replace 'var' by var+expr
         '-='           replace 'var' by var-expr
         '^-'           replace 'var' by var^expr
       NB: it is permissible to omit the 'var assignment-op' pair;
       may be be useful for the final expression, as in the last example.

    6. A C-like syntax of the form '{?~expr~strn1~strn2}'
       If expr evaluates to nonzero, the {...} is replaced by strn1
       If expr evaluates to zero, the {...} is replaced by strn2
       NB:  the '~' above can be any character

 To summarize, emphasizing the order of precedence: rdfiln first looks to
 see if the contents of `{...}' is the name of a character variable, or a
 name followed by qualifiation (...).  If so, `{...}' is replaced by the
 (possibly qualified) value of the variable.  If not, rdfiln sees whether
 the contents of `{...}' is the name of a vector variable.  If so, rdfiln
 substitutes `{...}' into a character representation of the vector as
 described in step 3 above.  If this fails, rdfiln parses `{...}' as a
 scalar expression, or a sequence of expressions, and `{..}' is replaced by
 a character representation of the result (4 and 5 above).

 Example:  suppose that the variables table looks like:
   Var       Name                 Val
    1        t                   1.0000
    2        f                  0.00000
    3        pi                  3.1416
    4        a                   2.0000
 ...
   Vec       Name            Size   Val[1..n]
    1        firstnums          5    1.0000        5.0000
    2        nextnums           5    6.0000        10.000
 ...
     char symbol                     value
    1 c                               half
    2 a                               whole
    3 blank

 NB: The scalar variables table always begins with predefined variables
 t=1,f=0 and pi.  It is STRONGLY ADVISED that you never alter any of
 these variables.

 You can print out the current tables of variables with the 'show'
 command; see below.  (Because the vector variables can have arbitrary
 length, 'show' prints only the size of the vector and the first and
 last entries.  As described in more detail below, you can create such
 a variables table with the following directives:

 % const a=2
 % char c half a whole blank " "
 % vec firstnums[5] 1 2 3 4 5
 % vec nextnums[5] 6 7 8 9 10

 Then rdfiln substitutes for the line
  {c} of the {a} {pi} is {pi/2}
 yields the following:
  half of the whole 3.1415926536 is 1.5707963268

 whereas the line
  one quarter is {1/(nextnums(4)-5)}
 becomes
  one quarter is .25

 The following illustrates substitution of character substrings:
 % char c half a whole
  To {c(1,3)}ve a cave is to make a {a(2,5)}!
 becomes
  To halve a cave is to make a hole!

 The following line illustrates substitution of vector name
  {firstnums}, I caught a hare alive, {nextnums} ...
 becomes
  1 2 3 4 5, I caught a hare alive, 6 7 8 9 10 ...

*Nesting of {...}.  If the contents of {...} contain an
 inner block of {}, the inner block is subtituted first, as
 the following illustrates.  The following line
    % const xx{1{2+{3+4}1}} = 2
 undergoes substitution in three passes
    % const xx{1{2+71}} = 2
    % const xx{173} = 2
    % const xx173 = 2

 This line combines nesting and '{?~expr~strn1~strn2}' syntax:
    MODE={?~k~B~C}3
 evaluates to, if k is nonzero
    MODE=B3
 or, if k is zero:
    MODE=C3

 -------------- Preprocessor directives --------------
This section describes the syntax for each of the directives rdfiln 
understands.

*'const', 'cconst' and 'var' load or alter the variables table.
 A variable 'myvar' is declared eg,  % const  myvar = expr.
 'expr' may be multiplied into, divided into, added into,
 subtracted from or exponentiated into an already-declared variable
 using one of the following C-like syntax:
   myvar*=expr  myvar/=expr  myvar+=expr  myvar-=expr  myvar^=expr

 'const' and 'var' are equivalent except that, for a variable
 already declared, 'const' ignores a re-declaration of the
 variable (nam=val), thus preserving its original value, while
 'var' alters its value; see example below.

 'cconst' is a conditional 'const': the first argument following
 'cconst' is an expression; declarations following the expression
 are parsed only if the expression evaluates to true.

 'cvar' is a conditional 'var': the first argument following
 'cvar' is an expression; declarations following the expression
 are parsed only if the expression evaluates to true.

 .... Example: for the input file
   % const a = 2 b=3 c=4 d=5
   a={a} b={b} c={c} d={d}
   % const a=3
   % var d=-1
   % const b*=2 c+=3
   a={a} b={b} c={c} d={d}
   % cconst b==6  b+=3 c-=3
   a={a} b={b} c={c} d={d}
   % cconst b==6  b+=3 c-=3
   a={a} b={b} c={c} d={d}

 generates four lines:
   a=2 b=3 c=4 d=5
   a=2 b=6 c=7 d=-1
   a=2 b=9 c=4 d=-1
   a=2 b=9 c=4 d=-1
 'a' is unchanged from its initial declaration while 'd' changes.
  The two 'cconst' show that 'b' and 'c' are altered in the first
  instance, since then 'b==6' is true, while are unchanged in
  the second instance, since this time 'b==6' is no longer true.

*'char' and 'cchar' load or alter the character table. Directive
 % char  c half     a whole      blank
 loads the character table as follows:
     char symbol                     value
    1 c                               half
    2 a                               whole
    3 blank
 The last value may be a blank string. 'cchar' has the syntax
 % cchar nam  expr1 str1 expr2 str2 ...
 expr1 expr2 etc are algebraic expressions and 'nam' takes the
 value 'str1' if expr1 evaluates to true (ie nearest integer is
 nonzero), the value 'str2' if expr2 evaluates to true, etc.
 Re-declaration of any previously defined variable has the effect
 of changing the contents of the variable
*'char0' is the same as 'char', except re-declaration of existing
 variables is ignored.
*'getenv' is the same as 'char', except the string char holds
 is used as a name for an environment variable, and its value
 is replaced by the value of the enviroment variable.  Thus
% getenv myhome HOME
 puts the string of your home directory into variable 'myhome.'

*'vec' loads or alters elements in the table of vector variables.
 % vec v[n]                  creates a vector variable of length n
 % vec v[n] n1 n2 n3 ...     ditto, first elements are also set
 NB: Once 'v' is already declared, elements of v may be set with
 the following syntax, which sets all elements bewtween i1..i2
 % vec v(i) n                or
 % vec v(i1:i2)  n1 n2 ... nn
 There must be exactly i2-i1+1 elements n1 ... nn.
 Also, if 'v' is already declared, it is an error to re-declare it.

*'vfind' finds the entry in an array that matches a specified value:
 % vfind v(i1:i2)  name match-value
 parses v(i) for i=i1..i2 and sets variable 'name' to i when it
 finds v(i)=match-value.  If no match, 'name' is set to zero.
 .... Example, the lines
 % vec  a[3] 101 2002 30003
 % vfind a(1:3) i 2002    <---- will set  i to 2
 % vfind a(1:3) i 10      <---- will set  i to 0

*'save' preserves some variables for future use
 % save              preserves all variables defined to this point
 % save name [name2 ...]                saves only variables named
 NB: only scalar variables may be saved.

*'udef' deletes a variable and its definition.
 Only scalar and character variables may be deleted
 rdfiln aborts with error if no variable exists to 'undefine'
*'udef -f' is equivalent to 'udef' except that 'udef -f' does
 nothing if an attempt is made to udefine a nonexistent variable

*'trace' when turned on, chatters about how rdfiln parses the input
         invoking 'trace' with no argument toggles whether it is
         on or off.
         'trace 0' turns the tracing off (the default)
         'trace 1' turns the tracing to lowest level:
                   all directives having to do with execution flow
                   (if-else-endif, repeat/while-end)
         'trace 2' prints some information about most directives.

*'echo' echos the current line to stdout (i1mach(2)).
*'stop expr msg' aborts with 'msg' if 'expr' evaluates to true
*'show' prints out various things:
 % show lines       (echos each line generated to the screen until:
 % show stop         is encountered)
 % show vars        (prints out the state of the variables table)

 Expressions are evaluated for both echo and stop before printout.
*'if expr', 'elseif expr', 'else' and 'endif' are conditional read
 blocks.  Lines between these directives are read or not,
 depending on the value of the expression following 'if.'  For
 .... Example, the lines
 % if Quartz
  is clear
 % elseif Ag
  is bright
 % else
  neither is right
 % endif
 generate one line ' is clear', if Quartz is true, ' is bright' if
 Ag is false but Quartz is true, ' neither is right' otherwise.

*ifdef is similar to if, but has a more general idea of what
 constitutes an expression.  First, 'if' requires a valid
 expression, while 'ifdef' treats an invalid expression (eg one
 containing an undefined variable) as a valid expression evaluating
 to false.  The syntax of ifdef allows several expressions :
 ifdef expr1 [| expr2 | expr3 ...]
 and if any of expr1, expr2, ... evaluate to true, the result
 is true, whether or not preceding expressions are valid.
 The spaces here are syntatically significant here, since
 expr1|expr2 is only true if both expr1 and expr2 are valid
 expressions, while expr1 | expr2 may be true if either is valid.
 'ifdef'  allows a limited use of character variables in
 expressions. Either of the following are permissible expressions:
   char-variable            (T if char-variable exists, otherwise F)
   char-variable=='string'  (T ifchar-variable equals "string")
 .... Example: ifdef  x1==2 | atom=='Mg'
   is true if scalar 'x1' is 2, or if character variable
   "atom" is equal to "Mg".
 Also, the 'expr' above can be groups of subexpressions of any type
 just mentioned, separated by ' & '.
 .... Example: ifdef  x1==2 & atom=='Mg' | x1===1
   is true if scalar 'x1' is 1, or 'x1' is 2, and character
   variable "atom" is equal to "Mg".
*'elseifd' is to 'elseif' as 'ifdef' is to 'if'.
'if' and/or 'ifdef' constructs may be nested to a depth of mxlev.
*'ifndef' expr ... is equivalent syntatically to
 'ifdef'  expr ... followed immediately by 'else'

*'while' and 'end', or 'repeat' and 'end' are looping constructs,
 as illustrated below.  The 'while' construct has the syntax
   % while [assignment assignment ...] expression
    lines here are repeatly read in while expression is true
   % end
 here the (optional) assignments following expression have the
 same syntax and meaning as the 'const' construct.  That is,
 they look like 'nam=expr' or 'nam op= expr'.  As in the 'const'
 case, 'nam=expr' only has effect when the variable 'nam' has
 is not in the variables table.  This is made evident in the
 example below.  'repeat' has the syntax
   % repeat varnam list
     lines here are reread, for each value 'varnam' takes in list;
     list can be an integer, eg '7' or a more complex integer list,
     eg '1:3,6,2' -- see mkilst.f for the syntax of an integer list.
   % end
 .... Example:  note in the 'while' construct the assignment
      'db=-1' is operative only the first time, while 'db+=2'
      is changes db in every loop.
 % const nm=-3 nn=4
 % while db=-1 db+=2 db<=3
 % repeat k= 2,7
 this is k={k} and db={db}
 {db+k+nn+nm} is db + k + nn+nm, where nn+nm={nn+nm}
 % end (loop over k)
 % end (loop over db)
 .... is expanded into
 this is k=2 and db=1
 4 is db + k + nn+nm, where nn+nm=1
 this is k=7 and db=1
 9 is db + k + nn+nm, where nn+nm=1
 this is k=2 and db=3
 6 is db + k + nn+nm, where nn+nm=1
 this is k=7 and db=3
 11 is db + k + nn+nm, where nn+nm=1

*include file-name causes rdfiln to open file 'file-name', and
 input is read from the new file until EOF, after which lines are
 read from the calling file.  %include may be nested to a depth
 of 10.  NB:  repeat-end and if-endif constructs MUST reside in the
 same file.  'includo' is identical to 'include', except that the
 rdfiln aborts if the file does not exist.
 Sandwiching include directives inside constructs is permissible.
