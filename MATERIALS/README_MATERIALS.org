# -*- Mode: org ; Coding: utf-8-unix -*-
#+TITLE: ecalj: examples in ecalj/MATERIALS/
#+AUTHOR: takao kotani @ tottori university, Japan
#+email: takaokotani@gmail.com

We have some examples in ecalj/MATERIALS/
Somethings in this directory are obsolate (or just unused recently).
At least, we have following samples working.


* Extact MTO-only Hamiltonian (we have samples Si_HamMTO/ and Fe_HamMTO/).
Here we show how to get MTO-only Hamiltonian after you get convergence in the PMT=MTO+APW method.
Examples are in Si_HamMTO, Fe_HamMTO.
Follow instructions below.

** CAUTION
***   iprint=0 except master in bndfp.F    
 ipr  = iprint() !When procid/=master, iprint=0



*** We now use pwmode=1 (but =11 should work as well). 
*** Spin symmetric MTOs with --phispinsym.
commit c81819cc16fd34d4bb352ba2eb9dc3e1d354aa56
Author: Takao Kotani <takaokotani@gmail.com>
Date:   Tue Aug 27 12:36:50 2019 +0900
   
    With --phispinsym option for lmf,lmf-MPIK, we can use spin-averages pnu and V0.
    You can use job_ham_phispinsym instead of job_ham.
    
    From V0 and pnu, we calculate radial funcitons phi and phidot.
       pnu corresponding to energies of radial schrodinger eq.
       V0 is the spherical potential, ssite(ib)%rv_a_ov0.
    
    
    Search --phispinsym in the console output. It shows
    ----
     bndfp: --phispinsym use spin-averaged potential for phi and phidot
      ibas l=  1  0 pnu=   4.58531   4.57791 -->   4.58161
      ibas l=  1  1 pnu=   4.40324   4.38211 -->   4.39268
    .... (this is symmetrization of pnu) at the begining of bndfp
    ----
     locpot: --phispinsym mode: use spin-averaged potential for phi and phidot
      ibas l=  1  0 pnu(1:nsp) pnz(1:nsp)=   4.58161   4.58161   0.00000   0.00000
      ibas l=  1  1 pnu(1:nsp) pnz(1:nsp)=   4.39268   4.39268   3.94432   3.94432
    ... (this shows pnu used in locpot).
    
    What we can do are
    
    1. self-consistent calculations can be performed with --phispinsym
    
    2. Even if the self-consistency is spin-dependent phi,phidot,
       job_ham_phispinsym (see --phispinsym option) gives Hamiltonian, based on the spin-symmetric radial functions.       Then the radial functions are calculated from the spin-averaged V0 and pnu.
    ---
    I think we can perfrom QSGW calculation if we use the option for lmf,lmfgw
       (not tested yet). We may need to insert --phispinsym in gwsc script (not yet).
    I think we can give Hamiltonian based on the spin-averaged phi,phidot
       even in QSGW self-consistent results without --phispinsym.
    
    =====================================================================
    MEMO for development:
     =====================================================================
    At first, note that we have lmf subroutines;
    --------
    fp/bndfp.F (main one-iteration loop of band calculation)
      -mkpot (potential generation)
      --locpot (MT parts)
      ---augmat (augmentation matrix: MT-part of Hamiltonian and overlap matrix).
    Note mkpot is called even in bndfp-sugw-mkpot
    
    locpot: gives ov0. ov0 is symmetrized.
    pnunew: renew pnu---so pnu should symmetrized.
    bndfp:  pnu is symmetrized at the begining befor mkpot-locpot



** step1 Get rst (and/or sigm).
From ctrl.si (or others like ctrl.fe), you do self-consistent calculations.
Check pwmode=1 as 
% const pwmode=1
      PWMODE={pwmode} 
in ctrl file

#+begin_src bash
lmfa fe
lmf fe
#+end_src
It can be LDA or QSGW, final results are in
rst.fe (sigm.fe in QSGW in addition to this).


** step2 Band plot with APW+MTO
  Make band plot. We need syml.fe or syml.si
  (you can get it by >getsylm fe; getsyml need to be soft linked to ecalj/GetSyml/getsyml.py).
>job_band fe -np 24, or si

  In llmf_band, you can find following lines  at
     bndfp: kpt     2 of    97 k=  0.0000 -0.0500  0.0000 ndimh = nmto+napw =    41   28   13
  This means 28 MTOs and 13 APWs used.
  Try
  >grep bndfp nmto fe
  Note job_band does not change rst file.

Keep your band plot. For example,
>mkdir PWMODE1
>cd PWMODE1
>cp bandplot* PWMODE1
>cp bnd* PWMODE1
You can replot bands by 
>cd PWMODE1
>gnuplot -p bandplot.isp1.glt

Current version of band mode generates qplist.dat which contains q point llist for band plot.

*** Eigenvalues are written as
 bndfp: kpt    1 of   97 k jsp=  0.00000  0.00000  0.00000 2 nev=   34
 -3.7314 -3.7314 -3.7314 -0.5675 -0.0092 -0.0091 -0.0091  0.1240  0.1240
  1.7952  1.7952  1.7952  2.4145  2.4145  2.4311  2.4311  2.4312  3.1464
  3.1465  3.1465  3.7662  4.7800  4.7801  4.7801  6.2200  6.2204  6.3346
  6.4887  7.3912  7.3913  7.3914  8.3638  8.3642  8.3648


 


** step3 Band Plot with MTO only
> job_band si -np 4 -vpwmode=0
   
  Check calcualtion without APW is good enough or not. (superpose bands in the step2 and step3.)
  (energy bands are plotted by the gnuplot script bandplot.isp*.glt)
  
  In the case of Si, a little differnce between APT+MTO and MTOonly.
  Without APWs, we have Band gap is too large by \sim 0.2eV in the case of pwmode=0.
  (one reason is that we use very localize MTOs in the default setting. or no empty spheres)

Keep your band plot. For example,
>mkdir PWMODE0
>cd PWMODE0
>cp bandplot* PWMODE0
>cp bnd* PWMODE01
You can replot bands by 
>cd PWMODE0
>gnuplot -p bandplot.isp1.glt

You can compare two band plot with -vpmode=1 and -vpmode=0 by a gnuplot command as follows.
(no fermi energy (top of valence control).)
*** gnuplot commands as
plot \
"PWMODE0/bnd001.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"PWMODE0/bnd002.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"PWMODE0/bnd003.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"PWMODE0/bnd004.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"PWMODE0/bnd005.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"PWMODE0/bnd006.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"PWMODE1/bnd001.spin1" u ($2):($3) lt 2 pt 2 w lp,\
"PWMODE1/bnd002.spin1" u ($2):($3) lt 2 pt 2 w lp,\
"PWMODE1/bnd003.spin1" u ($2):($3) lt 2 pt 2 w lp,\
"PWMODE1/bnd004.spin1" u ($2):($3) lt 2 pt 2 w lp,\
"PWMODE1/bnd005.spin1" u ($2):($3) lt 2 pt 2 w lp,\
"PWMODE1/bnd006.spin1" u ($2):($3) lt 2 pt 2 w lp
pause -1

(you can see the difference in ecalj/MATERIALS/Si_HamMTO/SiPWMODE11vs0.png)


At this point, you can check discrapancy between PMT=MTO+APW and MTO-block only diagonalization.


** step4 Generate PMT Hamiltonian for all mesh points. 
   >job_ham si -np 24 -np 4
   See job_ham script.
   HamiltonianPMT contains Hamiltonian and ovarlap matrix in the 1st BZ.
   (We use full mesh option --fullmesh --> this means we calculate Hamiltonian at 64 k point for 4x4x4).
   (IF -np 4 only eigenvalues 64/4=16 k points are shown in the console output
    ---In bndfp.F, we plot only the output of master core).

Be careful. At the begining of job_ham, we calculate the fermi energy by
>mpirun -np $3 ~/ecalj/lm7K/lmf-MPIK $1 --quit=band > lmf_efermi
This generate fermi energy file efermi.lmf.
This is for default pwmode if you don't specify -vpwmode=1.


** step 5 run lmfham and Read lm7K/lmfham.F
lmfham read HamltonianPMT and HamiltonianPMTinfo.
(HamiltonianPMT contains the Hamiltonian and overlap matrix for PMT+APW).
Look into ecalj/lm7K/lmfham.F

You can run lmfham only from files
  HamiltonianPMT     (hamiltonian and overlap matrix)
  HamiltonianPMTinfo (info lf lattice and  index 
  qplits.dat         (qpoint for which we plot bands).

Run 
 >lmfham
 lmfham generetes Hamiltonian and overlap matrix, and diagonalize it.
 You have to read ecalj/lm7K/lmfham.F

   This generates "band_lmfham1.dat" (and band_lmfham2.dat for isp=2).
   To plot them, use bandplotall.glt 
   (or make by yourself. Need to set Fermi energy. See head of qplist.dat to take the fermi energy.
    It is the fermi energy (top of valence) when you run last job_band).
 
The PMT index is shown in the console output of lmfham.F
  Do
  >lmfham |grep MHAM
  It shows the Hamiltonian index corresponds to which PMTs.

---
In lmfham.F, we read HamiltonianPMT and HamitonianPMTinfo by readHamiltonianPMT(),
(We read hammr, ovlmr : real-space hamiltonian and overlap.).

Then we generate hamm, for k along the k points on symmetry line.
(See the current version of lmfham.F is with symlcase=.true. you may modify this to any k points).
And then diagonalize it by "call zhev_tk2" 
(the subroutine's main inputs are hamm and ovlm, epsovl is for removing basis with poor linear dependency).

(Takao think it is better to write out a file HamiltonianMTO on regular mesh points. 
 Then another program read this and write symmetry line).
 
The index of PMT basis is included in HamiltonianPMTInfo. See m_readhamiltonianPMT in lmfham.F.
   + ldim: Hamiltonian dimension
   + ib_table: site index (site ordering is shown by lmchk).
   + l_tabale: l table. m takes -l to l ordering. See ends of jobpdos (showing real space harmonics).
   + k_table: k takes 1(EH),2(EH2), or 3(LO).
Ask to takaokotani@gmail.com 

*** plot bands with band_lmfham*.dat
You may add band_lmfham*.dat at the bottom of bandplot.isp1.glt as
plot \
"bnd001.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"bnd002.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"bnd003.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"bnd004.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"bnd005.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"bnd006.spin1" u ($2):($3) lt 1 pt 1 w lp,\
"band_lmfham_spin1.dat" u ($1):(13.605*($2-0.2239816400)) pt 2

Here 0.2239816400 is taken from the top line of qplist.dat, which contains efermi when you did job_band.
However, this is maybe not so exact (usually not so bad, but need to calculate efermi from MTO-hamiltonian).
We need to implement Fermi energy for MTO Hamiltonian, from which we calcualte habd_lmfham.*.dat

** Plan for development.
For  k point on mesh, read Hij(k).
Then we diagonalize (eigenfuncitons for PMT).
We also diagonalize for Hij(k)^MTO (eigenfuncitons for MTO).
Hij(k)^MTO --> Hij(k)^MTO_corrected in the following manner.


* job_materials.py :Variety of mateirals samples
(type without arguments; it shows help.)
It can perform LDA/GGA calculations in MATERIALS/Materials.ctrls.database.

 This job_materials.py works as follows for given material names.
 Step 1. Generate ctrls.* file for Materials.ctrls.database. (names are in DATASECTION:)
 Step 2. Generate ctrl by ctrlgenM1.py
 Make directtory such as Si/

* MgO_PROCAR : PROCAR generation sample
 Run jobprocar. This gives *.eps file which shows Fat band picture.
 PROCAR (vasp format) is generated and analysed by a script BandWeight.py.

* Samples_MLWF : Wannier function generator and cRPA 
  wannier90 method implemented in ecalj and cRPA. 
  (a cRPA method by Juelich group).
  See Samples_MLWF/README.

* mass_fit_test
  Effective mass calculation. See README.
